# Configuration file for the Sphinx documentation builder.
import os
import sys
import platform
from packaging import version as packaging_version
import sphinx

sys.path.insert(0, os.path.abspath('../..'))

# Project information
project = 'memories-dev'
copyright = '2025, Memories-dev'
author = 'Memories-dev'
# The short X.Y version
version = '2.0.2'
# The full version, including alpha/beta/rc tags
release = '2.0.2'

# The master toctree document - ensure a single master document
master_doc = 'index'
root_doc = 'index'

# Only include the root document for PDF generation
latex_only_doc = 'index'

# Add any Sphinx extension module names here
extensions = [
    'rst2pdf.pdfbuilder',
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinx_rtd_theme',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.autosummary',
    'nbsphinx',
    'sphinx_copybutton',
    'myst_parser',
    'sphinxcontrib.mermaid',
    'sphinx_design',           # Enhanced UI components
    'sphinx_tabs.tabs',        # Tabbed content
    'sphinx_togglebutton',     # Toggle buttons
    'sphinx_favicon',          # Multiple favicons
    'sphinx.ext.duration',     # Build duration tracking
    'sphinx_sitemap',          # Sitemap generation
    'sphinx_last_updated_by_git', # Last updated date from git
]

# LaTeX configuration for PDF output
# Ensure only one PDF is generated by using a single root document
latex_documents = [
    (master_doc, 'memories-dev.tex', 'Memories-Dev Documentation',
     'Your Name', 'manual'),
]

# Disable other LaTeX targets
latex_additional_files = []
latex_domain_indices = False
latex_use_parts = False
latex_use_modindex = False

# LaTeX elements configuration - simplified for better compatibility
latex_elements = {
    # Remove all font packages that might cause conflicts
    'fontpkg': '',
    # Use basic article class
    'papersize': 'letterpaper',
    'pointsize': '10pt',
    # Simplify preamble
    'preamble': '',
    # Use a simple title page
    'maketitle': '\\maketitle',
    # No raw format for now
    'raw_watch_conflict': False,
    # No figure conversion
    'figure_align': 'htbp',
    # Disable mermaid diagrams
    'usepackage_tikz': False,
    # Don't include hyperref
    'hyperref': '',
    # Don't handle math specially
    'sphinxsetup': 'verbatimwithframe=false',
    # Use basic article layout
    'fncychap': '',
    # Simplify packages
    'passoptionstopackages': '\\PassOptionsToPackage{draft}{graphicx}',
}

# If true, show page references after internal links
latex_show_pagerefs = False

# If true, show URL addresses after external links
latex_show_urls = 'footnote'

# Documents to append as an appendix to all manuals
latex_appendices = []

# Only generate one PDF for the entire documentation
latex_domain_indices = False

# -- Options for manual page output ---------------------------------------

# One entry per manual page
man_pages = [
    (master_doc, 'memories-dev', 'Memories-Dev Documentation',
     [author], 1)
]

# If true, show URL addresses after external links
man_show_urls = True

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files
texinfo_documents = [
    (master_doc, 'memories-dev', 'Memories-Dev Documentation',
     author, 'memories-dev', 'Collective Memory Infrastructure for AGI.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals
texinfo_appendices = []

# If false, no module index is generated
texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'
texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu
texinfo_no_detailmenu = False

# Handle type hints based on Python version
python_version = packaging_version.parse(platform.python_version())
sphinx_version = packaging_version.parse(sphinx.__version__)

# Configure type hints based on Python version
if python_version >= packaging_version.parse('3.13'):
    autodoc_typehints = 'none'  # Disable automatic type hints processing
    autodoc_typehints_format = 'fully-qualified'
    napoleon_use_param = True
    napoleon_use_rtype = True
    napoleon_preprocess_types = True
    napoleon_type_aliases = None
elif python_version >= packaging_version.parse('3.12'):
    extensions.append('sphinx_autodoc_typehints')
    autodoc_typehints = 'description'
    autodoc_typehints_format = 'short'
    autodoc_type_aliases = {}
else:
    autodoc_typehints = 'none'

# Add any paths that contain templates here
templates_path = ['_templates']

# These paths are either relative to html_static_path or fully qualified paths (eg. https://...)
html_css_files = [
    'css/consolidated.css',  # Single consolidated CSS file
]

html_js_files = [
    'js/consolidated.js',  # Single consolidated JavaScript file
]

# The suffix of source filenames
source_suffix = {
    '.rst': 'restructuredtext',
    '.md': 'markdown',
}

# List of patterns to exclude
exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    '**.ipynb_checkpoints',
    'env',
    'venv',
]

# The theme to use for HTML and HTML Help pages
html_theme = 'sphinx_rtd_theme'

# Add any paths that contain custom static files
html_static_path = ['_static']

# Prevent duplicate static files
html_copy_source = False
html_show_sourcelink = False

# Optimize static file handling
html_theme_options = {
    'navigation_depth': 2,
    'collapse_navigation': False,
    'sticky_navigation': True,
    'includehidden': False,
    'titles_only': True,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': True,
    'analytics_anonymize_ip': True,
    'canonical_url': 'https://memories-dev.readthedocs.io/',
}

# Base URL for the docs
html_baseurl = 'https://memories-dev.readthedocs.io/'

# HTML context
html_context = {
    'display_github': True,
    'github_user': 'Vortx-AI',
    'github_repo': 'memories-dev',
    'github_version': 'main',
    'conf_py_path': '/docs/source/',
    'enable_api_explorer': False,
    'enable_code_playground': False,
    'enable_guided_tour': False,
    'enable_feedback_collector': False,
    'enable_progress_tracker': False,
    'enable_version_selector': True,
    'enable_mobile_enhancer': True,
    'enable_formula_enhancer': True,
    'default_theme': 'dark',  # Options: 'dark', 'light', 'auto'
    'show_tour_on_first_visit': False,
    'disable_on_this_page': True,  # Set to True to completely disable the "On This Page" section
}

# Matrix theme title
html_title = "Memories-Dev Documentation"

# Matrix theme favicon
html_favicon = '_static/images/favicon.ico'

# Matrix theme logo
html_logo = '_static/images/logo.png'

# Mermaid configuration
mermaid_output_format = 'png'
mermaid_params = ['--theme', 'default', '--width', '100%']

# MyST settings
myst_enable_extensions = [
    'rst2pdf.pdfbuilder',
    'amsmath',
    'colon_fence',
    'deflist',
    'dollarmath',
    'html_admonition',
    'html_image',
]

# Add any extra paths that contain custom files
html_extra_path = ['robots.txt']

# Output file base name for HTML help builder
htmlhelp_basename = 'memories-dev-doc'

# Sitemap configuration
sitemap_url_scheme = "{link}"
sitemap_filename = "sitemap.xml"

# Last updated configuration
html_last_updated_fmt = "%b %d, %Y"

# Search configuration
search_language = "en"

# Mock imports for documentation build
autodoc_mock_imports = [
    "numpy", "pandas", "matplotlib", "PIL", "requests", "yaml",
    "dotenv", "tqdm", "pyarrow", "nltk", "langchain", "pydantic",
    "shapely", "geopandas", "rasterio", "pyproj", "pystac",
    "mercantile", "folium", "rtree", "geopy", "osmnx", "py6s",
    "redis", "xarray", "dask", "aiohttp", "memories",
    "cudf", "cuspatial", "faiss", "torch", "transformers"
]

# Intersphinx configuration
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'pandas': ('https://pandas.pydata.org/docs/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
}

# Disable certain extensions for latex build
def setup(app):
    # Add consolidated CSS and JS files
    app.add_css_file("css/consolidated.css")
    app.add_js_file("js/consolidated.js")
    
    
    
    # Add our comprehensive fixes JavaScript
    
    
    # Add other JavaScript files
    
    
    
    
    
    # Pass configuration options to JavaScript
    app.add_js_file(None, body=f'''
        // Configuration options for documentation
        window.DOCUMENTATION_OPTIONS.DISABLE_ON_THIS_PAGE = {str(html_context.get('disable_on_this_page', 'false')).lower()};
        window.DOCUMENTATION_OPTIONS.MAX_NAV_DEPTH = 2;
        window.DOCUMENTATION_OPTIONS.ENABLE_MERMAID = true;
    ''')
    
    # Fix math configuration
    app.add_js_file(None, body='''
        // Fix MathJax configuration
        window.MathJax = {
          tex: {
            inlineMath: [['$', '$'], ['\(', '\)']],
            displayMath: [['$$', '$$'], ['\[', '\]']],
            processEscapes: true,
            processEnvironments: true
          },
          options: {
            ignoreHtmlClass: 'tex2jax_ignore',
            processHtmlClass: 'tex2jax_process'
          },
          startup: {
            ready: function() {
              MathJax.startup.defaultReady();
            }
          }
        };
    ''')
    
    # Add custom event handlers
    app.connect('builder-inited', on_builder_inited)
    app.connect('build-finished', on_build_finished)

def on_builder_inited(app):
    """Run when the builder is initialized."""
    # Fix title underline warnings by patching docutils
    try:
        from docutils.parsers.rst.states import Body
        original_section = Body.section
        
        def patched_section(self, title, source, style, lineno, messages):
            """Patch the section method to fix title underline warnings."""
            if style == '=':
                # Ensure the underline is long enough
                title_length = len(title)
                if style * title_length != style * title_length:
                    style = style * title_length
            return original_section(self, title, source, style, lineno, messages)
        
        Body.section = patched_section
    except Exception as e:
        print(f"Warning: Could not patch docutils for title underlines: {e}")

def on_build_finished(app, exception):
    """Run when the build is finished."""
    if exception is None:  # Only run if build succeeded
        import os
        import shutil
        
        # Ensure _static directories exist in the output
        static_dir = os.path.join(app.outdir, '_static')
        css_dir = os.path.join(static_dir, 'css')
        os.makedirs(css_dir, exist_ok=True)
        
        # Copy our custom files if they don't exist in the output
        source_static = os.path.join(app.srcdir, '_static')
        
        # Helper function to copy files
        def copy_if_newer(src, dst):
            if os.path.exists(src) and (not os.path.exists(dst) or os.path.getmtime(src) > os.path.getmtime(dst)):
                shutil.copy2(src, dst)
        
        # Copy JS files
        for js_file in ['doc_fixes.js', 'lazy_loader.js', 'progress_tracker.js', 'nav_enhancer.js', 'theme_toggle.js']:
            src = os.path.join(source_static, js_file)
            dst = os.path.join(static_dir, js_file)
            copy_if_newer(src, dst)
        
        # Copy CSS files
        for css_file in ['custom.css', 'mobile.css']:
            src = os.path.join(source_static, 'css', css_file)
            dst = os.path.join(css_dir, css_file)
            copy_if_newer(src, dst)
        
        print("Custom files copied to output directory.")

# MathJax configuration for better formula rendering
mathjax_path = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js'
mathjax_options = {
    'async': 'async',
}
mathjax_config = {
    'tex2jax': {
        'inlineMath': [['$', '$'], ['\\(', '\\)']],
        'displayMath': [['$$', '$$'], ['\\[', '\\]']],
        'processEscapes': True,
        'processEnvironments': True,
    },
    'HTML-CSS': {
        'availableFonts': ['TeX'],
        'scale': 100,
        'linebreaks': {'automatic': True},
    },
    'SVG': {
        'linebreaks': {'automatic': True},
    },
    'CommonHTML': {
        'linebreaks': {'automatic': True},
    },
}

# MathJax configuration for formula enhancer
mathjax3_config = {
    'tex': {
        'inlineMath': [['$', '$'], ['\\(', '\\)']],
        'displayMath': [['$$', '$$'], ['\\[', '\\]']],
        'processEscapes': True,
        'processEnvironments': True,
        'packages': ['base', 'ams', 'noerrors', 'noundefined']
    },
    'options': {
        'ignoreHtmlClass': 'tex2jax_ignore',
        'processHtmlClass': 'tex2jax_process'
    }
}

# Lazy loading for images
html_scaled_image_link = False

# Disable smart quotes - they can cause problems 
smartquotes = False

# Other HTML options
html_use_index = True
html_split_index = False
html_show_sphinx = False

# Performance improvements
nitpicky = False  # Don't be too strict on references
keep_warnings = False  # Don't store warnings in output 
# -- Options for PDF output using rst2pdf ---------------------------------
pdf_documents = [
    ('index', 'memories-dev', 'Memories-Dev Documentation', 'Memories-Dev Team'),
]
pdf_stylesheets = ['sphinx', 'letter', '_styles/custom']
pdf_style_path = ['.', '_styles']
pdf_language = 'en_US'
pdf_fit_mode = "shrink"
pdf_break_level = 0
pdf_verbosity = 0
pdf_use_index = False
pdf_use_modindex = False
pdf_use_coverpage = True
