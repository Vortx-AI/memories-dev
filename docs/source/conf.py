# Configuration file for the Sphinx documentation builder.
import os
import sys
import platform
from packaging import version as packaging_version
import sphinx

sys.path.insert(0, os.path.abspath('../..'))

# Project information
project = 'memories-dev'
copyright = '2025, Memories-dev'
author = 'Memories-dev'
# The short X.Y version
version = '2.0.2'
# The full version, including alpha/beta/rc tags
release = '2.0.2'

# The master toctree document - ensure a single master document
master_doc = 'index'
root_doc = 'index'

# Only include the root document for PDF generation
latex_only_doc = 'index'

# Add any Sphinx extension module names here
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinx_rtd_theme',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.autosummary',
    'nbsphinx',
    'sphinx_copybutton',
    'myst_parser',
    'sphinxcontrib.mermaid',
    'sphinx_design',           # Enhanced UI components
    'sphinx_tabs.tabs',        # Tabbed content
    'sphinx_togglebutton',     # Toggle buttons
    'sphinx_favicon',          # Multiple favicons
    'sphinx.ext.duration',     # Build duration tracking
    'sphinx_sitemap',          # Sitemap generation
    'sphinx_last_updated_by_git', # Last updated date from git
    'sphinx_math_dollar',      # Allow $ for math
    'rst2pdf.pdfbuilder',      # PDF generation
]

# Configure sphinx_math_dollar
math_dollar_inline = True
math_dollar_displayed = True

# Configure MyST-Parser
myst_update_mathjax = False
myst_enable_extensions = [
    "dollarmath",
    "amsmath",
    "deflist",
    "fieldlist",
    "html_admonition",
    "html_image",
    "colon_fence",
    "smartquotes",
    "replacements",
    "substitution",
]

# Configure mermaid
mermaid_cmd = 'mmdc'
mermaid_output_format = 'svg'
mermaid_params = [
    '--backgroundColor', 'white',
    '--width', '1024'
]

# Additional Mermaid settings
mermaid = {
    'version': '10.6.1',  # Use the latest stable version
    'output_folder': '_images/mermaid'
}

# Disable mermaid if command is not available
import subprocess
import shutil
try:
    # Check if mmdc is available
    if shutil.which('mmdc'):
        print("Found mermaid-cli at:", shutil.which('mmdc'))
    else:
        print("Warning: mermaid-cli not found, disabling mermaid diagrams")
        if 'sphinxcontrib.mermaid' in extensions:
            extensions.remove('sphinxcontrib.mermaid')
except Exception as e:
    print("Error checking for mermaid-cli:", str(e))
    if 'sphinxcontrib.mermaid' in extensions:
        extensions.remove('sphinxcontrib.mermaid')

# LaTeX configuration for PDF output
# Ensure only one PDF is generated by using a single root document
latex_documents = [
    (master_doc, 'memories-dev.tex', 'Memories-Dev Documentation',
     'Your Name', 'manual'),
]

# Disable other LaTeX targets
latex_additional_files = []
latex_domain_indices = False
latex_use_parts = False
latex_use_modindex = False

# LaTeX elements configuration - simplified for better compatibility
latex_elements = {
    'papersize': 'letterpaper',
    'pointsize': '10pt',
    'preamble': r'''
        \usepackage{hyperref}
        \usepackage{bookmark}
        \usepackage{amsthm}
        \usepackage{amsmath}
        \usepackage{amssymb}
        \usepackage{graphicx}
        \usepackage{float}
        \usepackage{fancyhdr}
        \usepackage{titlesec}
        \usepackage{tocloft}
        \usepackage{etoolbox}
        \usepackage{longtable}
        \usepackage{multirow}
        \usepackage{multicol}
        \usepackage{tabularx}
        \usepackage{enumitem}
        \usepackage{xcolor}
        \usepackage{fontawesome5}
        \usepackage{caption}
        \usepackage{subcaption}
        \usepackage{listings}
        \usepackage{geometry}
        \usepackage{microtype}
        \usepackage{pdflscape}
        \usepackage{rotating}
        \usepackage{makeidx}
        \usepackage{fancyvrb}
        \usepackage{upquote}
        \usepackage{capt-of}
        \usepackage{needspace}
        \usepackage{xspace}
        \usepackage{textcomp}
        \usepackage{calc}
        \usepackage{titlesec}
        \usepackage{framed}
        \usepackage{soul}
        \usepackage{changepage}
        \usepackage{setspace}
        \usepackage{footmisc}
        \usepackage{parskip}
        \usepackage{ragged2e}
        \usepackage{marginnote}
        \usepackage{wrapfig}
        \usepackage{url}
        \usepackage{bookmark}
        \usepackage{svg}
        \usepackage{transparent}
        \usepackage{import}
        
        % Configure hyperref
        \hypersetup{
            colorlinks=true,
            linkcolor=blue,
            filecolor=magenta,      
            urlcolor=cyan,
            pdftitle={Memories-Dev Documentation},
            pdfpagemode=FullScreen,
            bookmarks=true,
            bookmarksopen=true,
            bookmarksnumbered=true,
            breaklinks=true,
            pdfborder={0 0 0}
        }
        
        % Fix for phantomsection
        \providecommand*{\phantomsection}{}
        
        % Configure graphics handling
        \DeclareGraphicsExtensions{.pdf,.png,.jpg,.jpeg,.svg}
        \pdfimageresolution=300
        
        % Configure listings for code blocks
        \lstset{
            basicstyle=\small\ttfamily,
            breaklines=true,
            breakatwhitespace=true,
            frame=single,
            numbers=left,
            numberstyle=\tiny,
            showstringspaces=false,
            tabsize=4
        }
        
        % Fix for SVG graphics
        \makeatletter
        \def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth\else\Gin@nat@width\fi}
        \def\maxheight{\ifdim\Gin@nat@height>\textheight\textheight\else\Gin@nat@height\fi}
        \makeatother
        
        % Adjust image scaling
        \setkeys{Gin}{width=\maxwidth,height=\maxheight,keepaspectratio}
    ''',
    'figure_align': 'H',
    'sphinxsetup': 'verbatimwithframe=false',
    'fncychap': '',
    'maketitle': '\\maketitle',
    'fontpkg': r'''
        \usepackage{lmodern}
        \usepackage[T1]{fontenc}
        \usepackage{textcomp}
    ''',
    'passoptionstopackages': r'''
        \PassOptionsToPackage{svgnames}{xcolor}
        \PassOptionsToPackage{table}{xcolor}
        \PassOptionsToPackage{draft=false}{graphicx}
    ''',
}

# If true, show page references after internal links
latex_show_pagerefs = False

# If true, show URL addresses after external links
latex_show_urls = 'footnote'

# Documents to append as an appendix to all manuals
latex_appendices = []

# Only generate one PDF for the entire documentation
latex_domain_indices = False

# -- Options for manual page output ---------------------------------------

# One entry per manual page
man_pages = [
    (master_doc, 'memories-dev', 'Memories-Dev Documentation',
     [author], 1)
]

# If true, show URL addresses after external links
man_show_urls = True

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files
texinfo_documents = [
    (master_doc, 'memories-dev', 'Memories-Dev Documentation',
     author, 'memories-dev', 'Collective Memory Infrastructure for AGI.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals
texinfo_appendices = []

# If false, no module index is generated
texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'
texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu
texinfo_no_detailmenu = False

# Handle type hints based on Python version
python_version = packaging_version.parse(platform.python_version())
sphinx_version = packaging_version.parse(sphinx.__version__)

# Configure type hints based on Python version
if python_version >= packaging_version.parse('3.13'):
    autodoc_typehints = 'none'  # Disable automatic type hints processing
    autodoc_typehints_format = 'fully-qualified'
    napoleon_use_param = True
    napoleon_use_rtype = True
    napoleon_preprocess_types = True
    napoleon_type_aliases = None
elif python_version >= packaging_version.parse('3.12'):
    extensions.append('sphinx_autodoc_typehints')
    autodoc_typehints = 'description'
    autodoc_typehints_format = 'short'
    autodoc_type_aliases = {}
else:
    autodoc_typehints = 'none'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# Add CSS files
html_css_files = [
    'css/enhanced_book.css',
    'css/responsive.css',
    'custom.css',
]

# Add JavaScript files
html_js_files = [
    'theme_toggle.js',
    'book_experience.js',
    'code-highlight.js',
    'formula_enhancer.js',
    'js/enhanced_book.js',
    'js/fix_navigation.js',
]

# The suffix of source filenames
source_suffix = {
    '.rst': 'restructuredtext',
    '.md': 'markdown',
}

# List of patterns to exclude
exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    '**.ipynb_checkpoints',
    'env',
    'venv',
]

# The theme to use for HTML and HTML Help pages
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
html_theme_options = {
    'navigation_depth': 4,
    'collapse_navigation': False,
    'sticky_navigation': True,
    'includehidden': True,
    'titles_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'both',
    'style_external_links': True,
    'style_nav_header_background': '#1a5276',
    'logo_only': True,
    'display_version': True,
    'style_external_links': True,
    'vcs_pageview_mode': 'blob',
    'navigation_with_keys': True,
    'globaltoc_collapse': False,
    'globaltoc_maxdepth': 4,
    'canonical_url': 'https://memories-dev.readthedocs.io/',
    'analytics_id': None,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False,
    'sidebarwidth': 300
}

# MathJax 3 configuration
mathjax3_config = {
    'tex': {
        'inlineMath': [['$', '$'], ['\\(', '\\)']],
        'displayMath': [['$$', '$$'], ['\\[', '\\]']],
        'processEscapes': True,
        'processEnvironments': True
    },
    'options': {
        'ignoreHtmlClass': 'tex2jax_ignore|mathjax_ignore|document',
        'processHtmlClass': 'tex2jax_process'
    },
    'loader': {
        'load': ['[tex]/ams']
    },
    'startup': {
        'typeset': True
    }
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
html_sidebars = {
    '**': [
        'globaltoc.html',
        'relations.html',
        'sourcelink.html',
        'searchbox.html',
    ]
}

# Prevent duplicate static files
html_copy_source = False
html_show_sourcelink = False

# Base URL for the docs - properly replaces canonical_url
html_baseurl = 'https://memories-dev.readthedocs.io/'

# HTML context
html_context = {
    'display_github': True,
    'github_user': 'Vortx-AI',
    'github_repo': 'memories-dev',
    'github_version': 'main',
    'conf_py_path': '/docs/source/',
    'enable_api_explorer': False,
    'enable_code_playground': False,
    'enable_guided_tour': True,
    'enable_feedback_collector': True,
    'enable_progress_tracker': True,
    'enable_version_selector': True,
    'enable_mobile_enhancer': True,
    'enable_formula_enhancer': True,
    'default_theme': 'dark',  # Options: 'dark', 'light', 'auto'
    'show_tour_on_first_visit': True,
    'disable_on_this_page': True,  # Set to True to disable the "On This Page" section
}

# Matrix theme title
html_title = "Memories-Dev Documentation"

# Matrix theme favicon
html_favicon = '_static/favicon.ico'

# Matrix theme logo
html_logo = '_static/logo.svg'  # Updated to use our new SVG logo

# Mermaid configuration
mermaid_version = "latest"
mermaid_init_js = """
    mermaid.initialize({
        startOnLoad: true,
        theme: 'default',
        flowchart: {
            useMaxWidth: false,
            htmlLabels: true,
            curve: 'cardinal',
        },
        securityLevel: 'loose',
        themeCSS: '.node rect { fill: #f4f4f4; stroke: #999; stroke-width: 1px; }',
    });
"""

# MyST configuration
myst_enable_extensions = [
    'colon_fence',
    'deflist',
    'dollarmath',
    'fieldlist',
    'html_admonition',
    'html_image',
    'replacements',
    'smartquotes',
    'substitution',
    'tasklist',
]

# Add any extra paths that contain custom files
html_extra_path = ['robots.txt']

# Output file base name for HTML help builder
htmlhelp_basename = 'memories-dev-doc'

# Sitemap configuration
sitemap_url_scheme = "{link}"
sitemap_filename = "sitemap.xml"

# Last updated configuration
html_last_updated_fmt = "%b %d, %Y"

# Search configuration
search_language = "en"

# Mock imports for documentation build
autodoc_mock_imports = [
    "numpy", "pandas", "matplotlib", "PIL", "requests", "yaml",
    "dotenv", "tqdm", "pyarrow", "nltk", "langchain", "pydantic",
    "shapely", "geopandas", "rasterio", "pyproj", "pystac",
    "mercantile", "folium", "rtree", "geopy", "osmnx", "py6s",
    "redis", "xarray", "dask", "aiohttp", "memories",
    "cudf", "cuspatial", "faiss", "torch", "transformers"
]

# Intersphinx configuration
intersphinx_mapping = {
    'python': ('https://docs.python.org/3', None),
    'numpy': ('https://numpy.org/doc/stable/', None),
    'pandas': ('https://pandas.pydata.org/docs/', None),
    'matplotlib': ('https://matplotlib.org/stable/', None),
}

# Disable certain extensions for latex build
def setup(app):
    # Make sure static directories exist
    static_dir = os.path.join(os.path.dirname(__file__), '_static')
    css_dir = os.path.join(static_dir, 'css')
    js_dir = os.path.join(static_dir, 'js')
    images_dir = os.path.join(static_dir, 'images')
    
    for directory in [static_dir, css_dir, js_dir, images_dir]:
        if not os.path.exists(directory):
            os.makedirs(directory)
    
    # Add any paths that contain custom static files
    app.add_css_file('css/book_style.css')
    app.add_css_file('css/responsive.css')
    app.add_css_file('custom.css')
    
    # Add JavaScript for enhancing formulas
    app.add_js_file('book_experience.js')
    app.add_js_file('formula_enhancer.js')
    
    # Pass configuration to JavaScript
    app.add_js_file(None, body=f'''
    document.addEventListener('DOMContentLoaded', function() {{
        window.memoryCodexConfig = {{
            navDepth: {html_theme_options.get('navigation_depth', 4)},
            enableMermaid: {str(bool('sphinxcontrib.mermaid' in extensions)).lower()},
            bookTitle: "memories-dev",
            bookSubtitle: "Python package for Earth-Grounded AI",
            enableBookExperience: false
        }};
    }});
    ''')

    # MathJax configuration
    app.add_js_file(None, body='''
    window.MathJax = {
        tex: {
            inlineMath: [['\\\\(', '\\\\)']],
            displayMath: [['\\\\[', '\\\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            ignoreHtmlClass: '.*',
            processHtmlClass: 'math.*'
        }
    };
    ''')
    
    # Handle SVG conversion for LaTeX
    def convert_svg_on_build(app, env, docnames):
        import os
        import subprocess
        from pathlib import Path
        
        # Get all SVG files in _static and its subdirectories
        static_dir = Path(app.srcdir) / '_static'
        svg_files = list(static_dir.rglob('*.svg'))
        
        for svg_file in svg_files:
            pdf_file = svg_file.with_suffix('.pdf')
            if not pdf_file.exists() or pdf_file.stat().st_mtime < svg_file.stat().st_mtime:
                try:
                    # Try using rsvg-convert if available
                    subprocess.run(['rsvg-convert', '-f', 'pdf', '-o', str(pdf_file), str(svg_file)], check=True)
                except (subprocess.CalledProcessError, FileNotFoundError):
                    try:
                        # Fallback to inkscape
                        subprocess.run(['inkscape', '-z', '-D', '--file=' + str(svg_file),
                                     '--export-pdf=' + str(pdf_file)], check=True)
                    except (subprocess.CalledProcessError, FileNotFoundError):
                        print(f"Warning: Could not convert {svg_file} to PDF. Please install rsvg-convert or inkscape.")
    
    # Connect SVG conversion
    app.connect('env-before-read-docs', convert_svg_on_build)
    
    # Connect customization events
    app.connect('builder-inited', on_builder_inited)
    app.connect('build-finished', on_build_finished)
    
    return {
        'version': '0.1',
        'parallel_read_safe': True,
        'parallel_write_safe': True,
    }

def on_builder_inited(app):
    """Run when the builder is initialized."""
    # Fix title underline warnings by patching docutils
    try:
        from docutils.parsers.rst.states import Body
        original_section = Body.section
        
        def patched_section(self, title, source, style, lineno, messages):
            """Patch the section method to fix title underline warnings."""
            if style == '=':
                # Ensure the underline is long enough
                title_length = len(title)
                if style * title_length != style * title_length:
                    style = style * title_length
            return original_section(self, title, source, style, lineno, messages)
        
        Body.section = patched_section
    except Exception as e:
        print(f"Warning: Could not patch docutils for title underlines: {e}")

def on_build_finished(app, exception):
    """Run when the build is finished."""
    if exception is None:  # Only run if build succeeded
        import os
        import shutil
        
        # Ensure _static directories exist in the output
        static_dir = os.path.join(app.outdir, '_static')
        css_dir = os.path.join(static_dir, 'css')
        os.makedirs(css_dir, exist_ok=True)
        
        # Copy our custom files if they don't exist in the output
        source_static = os.path.join(app.srcdir, '_static')
        
        # Helper function to copy files
        def copy_if_newer(src, dst):
            if os.path.exists(src) and (not os.path.exists(dst) or os.path.getmtime(src) > os.path.getmtime(dst)):
                shutil.copy2(src, dst)
        
        # Copy JS files
        for js_file in ['doc_fixes.js', 'lazy_loader.js', 'progress_tracker.js', 'nav_enhancer.js', 'theme_toggle.js', 'book_experience.js']:
            src = os.path.join(source_static, js_file)
            dst = os.path.join(static_dir, js_file)
            copy_if_newer(src, dst)
        
        # Copy CSS files
        for css_file in ['custom.css', 'mobile.css', 'book_style.css']:
            src = os.path.join(source_static, 'css', css_file)
            dst = os.path.join(css_dir, css_file)
            copy_if_newer(src, dst)
        
        print("Custom files copied to output directory.")

# Lazy loading for images
html_scaled_image_link = False

# Disable smart quotes - they can cause problems 
smartquotes = False

# Other HTML options
html_use_index = True
html_split_index = False
html_show_sphinx = False

# Performance improvements
nitpicky = False  # Don't be too strict on references
keep_warnings = False  # Don't store warnings in output 
# -- Options for PDF output using rst2pdf ---------------------------------
pdf_documents = [
    ('index', 'memories-dev', 'Memories-Dev Documentation', 'Memories-dev'),
]
pdf_stylesheets = ['sphinx', 'kerning', 'a4']
pdf_use_index = True
pdf_toc_depth = 3
pdf_use_modindex = False
pdf_break_level = 1
pdf_inline_footnotes = True
pdf_extensions = ['vectorpdf']
pdf_use_coverpage = True

# Enable the book experience for all pages by default
book_experience_enabled = True

# Configure image handling for LaTeX
latex_additional_files = []
latex_images = True
latex_show_urls = 'footnote'
latex_use_xindy = False
latex_elements['printindex'] = ''
latex_engine = 'pdflatex'
