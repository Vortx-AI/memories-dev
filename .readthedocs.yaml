# .readthedocs.yaml
# Read the Docs configuration file for memories.dev v2.0.2 - Collective Memory Infrastructure for AGI
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the OS, Python version and other tools
build:
  os: ubuntu-22.04
  tools:
    python: "3.9"
  apt_packages:
    - latexmk
    - texlive-latex-recommended
    - texlive-latex-extra
    - texlive-fonts-recommended
    - texlive-lang-english
    - texlive-xetex
    - texlive-luatex
    - texlive-pictures
    - texlive-science
    - texlive-plain-generic
    - texlive-fonts-extra
    - texlive-bibtex-extra
    - texlive-latex-base
    - texlive-font-utils
    - texlive-humanities
    - cm-super
    - dvipng
    - ghostscript
    - librsvg2-bin  # For SVG to PDF conversion
    - inkscape      # Alternative SVG converter
    - pdf2svg       # For PDF to SVG conversion if needed
    - imagemagick   # For image processing
    - fonts-liberation  # Additional fonts
    - fonts-freefont-ttf  # More fonts
  jobs:
    pre_build:
      # Core setup
      - pip install -e .
      - pip install -r docs/requirements.txt
      # Additional setup for comprehensive documentation
      - python -m pip install --upgrade pip setuptools wheel
      - python -m pip install sphinx-rtd-theme sphinx-copybutton sphinx-tabs
      # Install SVG conversion tools
      - pip install cairosvg svglib
      # Clean build directory
      - cd docs && make clean
      # Generate API documentation
      - sphinx-apidoc -o docs/source/api_reference memories/ --force --separate --module-first --no-toc
      # Create necessary directories
      - mkdir -p docs/build/latex
      - mkdir -p docs/build/pdf
      # Configure ImageMagick policy - with enhanced error handling
      - |
        # Create policy directories with proper permissions
        mkdir -p ~/.config/ImageMagick || true
        chmod 755 ~/.config/ImageMagick || true
        
        # Create a custom policy file with broader permissions
        cat > ~/.config/ImageMagick/policy.xml << 'EOL'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE policymap [
          <!ELEMENT policymap (policy)+>
          <!ELEMENT policy EMPTY>
          <!ATTLIST policy domain (delegate|coder|filter|path|resource) #REQUIRED>
          <!ATTLIST policy name CDATA #REQUIRED>
          <!ATTLIST policy rights CDATA #IMPLIED>
          <!ATTLIST policy pattern CDATA #IMPLIED>
          <!ATTLIST policy value CDATA #IMPLIED>
        ]>
        <policymap>
          <!-- Enable PDF operations -->
          <policy domain="coder" rights="read|write" pattern="PDF" />
          <policy domain="coder" rights="read|write" pattern="LABEL" />
          <!-- Enable SVG operations -->
          <policy domain="coder" rights="read|write" pattern="SVG" />
          <!-- Enable general image operations -->
          <policy domain="coder" rights="read|write" pattern="PNG" />
          <policy domain="coder" rights="read|write" pattern="JPEG" />
          <policy domain="coder" rights="read|write" pattern="GIF" />
          <!-- Security settings -->
          <policy domain="path" rights="none" pattern="@*" />
          <policy domain="cache" name="shared-secret" value="passphrase" stealth="true" />
          <!-- Resource limits -->
          <policy domain="resource" name="memory" value="2GiB"/>
          <policy domain="resource" name="map" value="4GiB"/>
          <policy domain="resource" name="disk" value="8GiB"/>
        </policymap>
        EOL
        
        # Set proper permissions for the policy file
        chmod 644 ~/.config/ImageMagick/policy.xml || true
        
        # Set environment variables for ImageMagick
        export MAGICK_CONFIGURE_PATH=~/.config/ImageMagick
        export MAGICK_HOME=~/.config/ImageMagick
        export MAGICK_THREAD_LIMIT=1  # Prevent threading issues
        
        # Verify policy file exists and is readable
        if [ -f ~/.config/ImageMagick/policy.xml ]; then
          echo "Custom ImageMagick policy file created successfully"
          ls -l ~/.config/ImageMagick/policy.xml
          cat ~/.config/ImageMagick/policy.xml
        else
          echo "Warning: Failed to create custom ImageMagick policy file"
          ls -la ~/.config/ImageMagick || true
        fi
        
        # Verify ImageMagick installation and configuration
        convert -version || true
        identify -list policy || true
        
        # Try to modify system policy files as fallback (if we have permission)
        for policy_file in /etc/ImageMagick*/policy.xml /usr/local/etc/ImageMagick*/policy.xml; do
          if [ -f "$policy_file" ]; then
            echo "Found system policy file: $policy_file"
            if [ -w "$policy_file" ]; then
              cp "$policy_file" "$policy_file.bak" 2>/dev/null || true
              sed -i.bak 's/rights="none" pattern="PDF"/rights="read|write" pattern="PDF"/' "$policy_file" 2>/dev/null || true
              echo "Modified system policy file: $policy_file"
            else
              echo "Cannot modify system policy file (no write permission): $policy_file"
            fi
          fi
        done
    post_build:
      # Use our custom PDF build script instead of LaTeX
      - python fix_scripts/simple_pdf_build.py
      - mkdir -p _readthedocs/html
      - cp docs/build/pdf/memories-dev.pdf _readthedocs/html/ || echo "PDF build failed, continuing anyway"

# Sphinx configuration
sphinx:
  configuration: docs/source/conf.py
  fail_on_warning: false
  builder: html

# Documentation formats - Only include HTML
formats:
  - pdf
  - epub

# Python package installation
python:
  install:
    - requirements: docs/requirements-docs.txt
    - method: pip
      path: .
    # We don't need requirements-dev.txt since we have all PDF generation packages in docs/requirements.txt
    - method: pip
      path: .
      extra_requirements:
        - docs

# Repository configuration
submodules:
  include: all
  recursive: true

# Search configuration
search:
  ranking:
    getting_started/*: 5
    user_guide/*: 4
    api_reference/*: 3
    examples/*: 4
    advanced_topics/*: 3
    contributing/*: 2

# Use a conda environment for additional dependencies
# conda:
#   environment: environment.yml
