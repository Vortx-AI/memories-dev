# .readthedocs.yaml
# Read the Docs configuration file for memories-dev

# Required
version: 2

# Set the version of Python and other tools you might need
build:
  os: ubuntu-22.04
  tools:
    python: "3.12"
  jobs:
    pre_build:
      # Install core dependencies
      - python -m pip install --upgrade pip setuptools wheel
      - pip install docutils==0.18.1
      - pip install sphinx==7.1.2 sphinx-rtd-theme==1.3.0 sphinxcontrib-jquery>=4.1
      - pip install -r docs/requirements.txt
      
      # Create mock directories
      - mkdir -p data/models data/cache config docs/source/api_reference
      
      # Create a simple patch for autodoc to exclude problematic modules
      - |
        cat > docs/source/conf_patch.py << 'EOL'
        #!/usr/bin/env python
        """Patch for conf.py to exclude problematic modules."""
        import os
        import sys

        try:
            # Create directories
            os.makedirs('data/models', exist_ok=True)
            os.makedirs('data/cache', exist_ok=True)
            os.makedirs('config', exist_ok=True)
            
            # Create mock config
            if not os.path.exists('config/db_config.yml'):
                with open('config/db_config.yml', 'w') as f:
                    f.write('# Mock config\ndatabases:\n  memory_store:\n    host: localhost\n')
            
            # Update conf.py to exclude problematic modules
            conf_path = 'docs/source/conf.py'
            if not os.path.exists(conf_path):
                print(f"Warning: {conf_path} does not exist. Creating a minimal version.")
                with open(conf_path, 'w') as f:
                    f.write('# Auto-generated minimal conf.py\nautodoc_mock_imports = []\n')
            
            with open(conf_path, 'r') as f:
                content = f.read()
            
            # Add diffusers to autodoc_mock_imports
            if 'autodoc_mock_imports = [' in content:
                content = content.replace(
                    'autodoc_mock_imports = [',
                    'autodoc_mock_imports = [\n    "diffusers.loaders.single_file",\n    "diffusers",\n'
                )
            else:
                print("Warning: autodoc_mock_imports not found in conf.py. Adding it.")
                content += '\n\n# Added by conf_patch.py\nautodoc_mock_imports = [\n    "diffusers.loaders.single_file",\n    "diffusers",\n]\n'
            
            # Write updated conf.py
            with open(conf_path, 'w') as f:
                f.write(content)
            
            print("Updated conf.py to exclude problematic modules")
        except Exception as e:
            print(f"Error in conf_patch.py: {e}")
            # Continue with the build even if patching fails
            sys.exit(0)
        EOL
      
      # Run the patch script
      - python docs/source/conf_patch.py
      
      # Install the package in development mode
      - pip install -e .
      
      # Generate API documentation with exclude pattern
      - sphinx-apidoc -o docs/source/api_reference memories/ --exclude="*diffusers*" || echo "API doc generation failed"

# Sphinx configuration
sphinx:
  builder: html
  configuration: docs/source/conf.py
  fail_on_warning: false

# Python requirements
python:
  install:
    - method: pip
      path: .
    
# Build documentation in additional formats
formats:
  - html

# Don't use submodules for documentation
submodules:
  include: []
  recursive: false 