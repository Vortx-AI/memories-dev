{
  "queries": [
    {
      "name": "Exact Match Query",
      "function": "exact_match_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {column_name} = '{value}';",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to match against",
        "value": "The exact value to search"
      },
      "output_expected": "A dataset containing all rows where the column exactly matches the provided value.",
      "explanation": "This query filters the dataset by verifying each row's specified column against an exact value.",
      "details": "Use this query when you need to retrieve data based on an exact match; for example, filtering users by ID or name."
    },
    {
      "name": "LIKE Query",
      "function": "like_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {column_name} LIKE '{pattern}';",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Column name to perform pattern matching",
        "pattern": "The pattern to search for, e.g., 'prefix%'"
      },
      "output_expected": "Rows where the column contains values matching the specified pattern.",
      "explanation": "Uses the SQL LIKE operator to facilitate pattern matching on text data.",
      "details": "Useful for fuzzy matching or searching for values that begin with, end with, or contain a certain substring."
    },
    {
      "name": "At Coordinates Query",
      "function": "at_coordinates_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {lat_col} = {target_lat} AND {lon_col} = {target_lon};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value"
      },
      "output_expected": "Records that exactly match the given latitude and longitude.",
      "explanation": "This query retrieves data that is precisely at the specified coordinates.",
      "details": "Useful for pinpointing exact locations in geospatial datasets."
    },
    {
      "name": "Within Radius Query",
      "function": "within_radius_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE ST_Distance(ST_Point({lon_col}, {lat_col}), ST_Point({target_lon}, {target_lat})) <= {radius};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value",
        "radius": "Radius within which to search"
      },
      "output_expected": "Rows that are within the specified radius from the target coordinates.",
      "explanation": "Calculates the distance from each record to the target point and filters those within the given radius.",
      "details": "Assumes the presence of spatial functions like ST_Distance and ST_Point. Ideal for proximity search."
    },
    {
      "name": "Nearest Query",
      "function": "nearest_query",
      "code_to_execute": "SELECT *, ST_Distance(ST_Point({lon_col}, {lat_col}), ST_Point({target_lon}, {target_lat})) AS distance FROM '{parquet_file}' ORDER BY distance ASC LIMIT 1;",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value"
      },
      "output_expected": "The row that is closest to the specified coordinates along with its calculated distance.",
      "explanation": "Sorts the rows by their distance from a target point and retrieves the nearest one.",
      "details": "Ideal for applications requiring nearest neighbor lookup in a spatial dataset."
    },
    {
      "name": "Bounding Box Query",
      "function": "bounding_box_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {lat_col} BETWEEN {min_lat} AND {max_lat} AND {lon_col} BETWEEN {min_lon} AND {max_lon};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "min_lat": "Minimum latitude value",
        "max_lat": "Maximum latitude value",
        "min_lon": "Minimum longitude value",
        "max_lon": "Maximum longitude value"
      },
      "output_expected": "All records that fall within the defined rectangular area.",
      "explanation": "Filters records whose latitude and longitude lie within the specified ranges.",
      "details": "Useful for spatial queries that define areas with bounding coordinates."
    },
    {
      "name": "Count Within Radius Query",
      "function": "count_within_radius_query",
      "code_to_execute": "SELECT COUNT(*) FROM '{parquet_file}' WHERE ST_Distance(ST_Point({lon_col}, {lat_col}), ST_Point({target_lon}, {target_lat})) < {radius};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value",
        "radius": "Radius within which to count records"
      },
      "output_expected": "The number of records found within the specified radius.",
      "explanation": "Counts the number of locations within a given radius using spatial distance.",
      "details": "Ideal for obtaining summary statistics on spatial data."
    },
    {
      "name": "Aggregate Query",
      "function": "aggregate_query",
      "code_to_execute": "SELECT {group_column}, COUNT(*) FROM '{parquet_file}' WHERE ST_Distance(ST_Point({lon_col}, {lat_col}), ST_Point({target_lon}, {target_lat})) < {radius} GROUP BY {group_column};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "group_column": "Column name to group the results by",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value",
        "radius": "Radius within which to aggregate records"
      },
      "output_expected": "Aggregated counts of records grouped by the specified column for entries within the radius.",
      "explanation": "Groups spatially filtered records by a designated column and returns the count for each group.",
      "details": "Useful for analyzing spatial data categorization and distribution."
    },
    {
      "name": "Combined Filters Query",
      "function": "combined_filters_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {text_column} LIKE '{pattern}' AND ST_Distance(ST_Point({lon_col}, {lat_col}), ST_Point({target_lon}, {target_lat})) < {radius};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "text_column": "Name of the column for text pattern matching",
        "pattern": "Pattern to search for (e.g., '%pattern%')",
        "lat_col": "Name of the latitude column",
        "lon_col": "Name of the longitude column",
        "target_lat": "Target latitude value",
        "target_lon": "Target longitude value",
        "radius": "Radius within which to apply spatial filtering"
      },
      "output_expected": "Records meeting both the text-based and spatial proximity criteria.",
      "explanation": "Combines a LIKE-based text filter with a spatial filter based on proximity.",
      "details": "Useful when you want to apply both textual and geospatial filters on the dataset."
    },
    {
      "name": "Range Query",
      "function": "range_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {column_name} BETWEEN {min_value} AND {max_value};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to filter on",
        "min_value": "Minimum value of the range",
        "max_value": "Maximum value of the range"
      },
      "output_expected": "Records where the specified column's value falls within the given range.",
      "explanation": "Selects rows whose values in a specified column are within a given range.",
      "details": "Typically used for filtering numeric or date ranges."
    }
  ],
  "query_functions": {
    "exact_match_query": {
      "description": "Find records that exactly match a value in a specific column and have valid geometry",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match exactly"
      },
      "example": "exact_match_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant')"
    },
    "like_query": {
      "description": "Find records that match a pattern in a specific column and have valid geometry",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "pattern": "SQL LIKE pattern to match"
      },
      "example": "like_query('data.parquet', 'geometry', 'POINT', 'name', '%restaurant%')"
    },
    "at_coordinates_query": {
      "description": "Find records at specific coordinates that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match in the column",
        "target_lat": "Target latitude",
        "target_lon": "Target longitude"
      },
      "example": "at_coordinates_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 12.9716, 77.5946)"
    },
    "within_radius_query": {
      "description": "Find records within a radius that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match in the column",
        "target_lat": "Center latitude",
        "target_lon": "Center longitude",
        "radius": "Search radius in meters"
      },
      "example": "within_radius_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 12.9716, 77.5946, 1000)"
    },
    "nearest_query": {
      "description": "Find the nearest record matching a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match in the column",
        "target_lat": "Reference latitude",
        "target_lon": "Reference longitude"
      },
      "example": "nearest_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 12.9716, 77.5946)"
    },
    "bounding_box_query": {
      "description": "Find records within a bounding box that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match in the column",
        "min_lat": "Minimum latitude",
        "max_lat": "Maximum latitude",
        "min_lon": "Minimum longitude",
        "max_lon": "Maximum longitude"
      },
      "example": "bounding_box_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 12.9, 13.0, 77.5, 77.6)"
    },
    "count_within_radius_query": {
      "description": "Count records within a radius that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Name of the column to filter",
        "value": "Value to match in the column",
        "target_lat": "Center latitude",
        "target_lon": "Center longitude",
        "radius": "Search radius in meters"
      },
      "example": "count_within_radius_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 12.9716, 77.5946, 1000)"
    },
    "aggregate_query": {
      "description": "Group and count records within radius that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "group_column": "Column to group by",
        "filter_column": "Column to filter on",
        "value": "Value to match in filter column",
        "target_lat": "Center latitude",
        "target_lon": "Center longitude",
        "radius": "Search radius in meters"
      },
      "example": "aggregate_query('data.parquet', 'geometry', 'POINT', 'cuisine', 'amenity', 'restaurant', 12.9716, 77.5946, 1000)"
    },
    "combined_filters_query": {
      "description": "Find records matching multiple conditions including spatial and pattern filters",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "column_name": "Primary column to filter",
        "value": "Value to match exactly",
        "pattern_column": "Column to apply pattern matching",
        "pattern": "Pattern to match",
        "target_lat": "Center latitude",
        "target_lon": "Center longitude",
        "radius": "Search radius in meters"
      },
      "example": "combined_filters_query('data.parquet', 'geometry', 'POINT', 'amenity', 'restaurant', 'name', '%pizza%', 12.9716, 77.5946, 1000)"
    },
    "range_query": {
      "description": "Find records within a numeric range that match a column value",
      "parameters": {
        "parquet_file": "Path to the Parquet file",
        "geometry_column": "Name of the geometry column",
        "geometry_type": "Type of geometry (e.g., POINT, POLYGON)",
        "range_column": "Column for range check",
        "min_value": "Minimum value in range",
        "max_value": "Maximum value in range",
        "filter_column": "Column to filter on",
        "value": "Value to match in filter column"
      },
      "example": "range_query('data.parquet', 'geometry', 'POINT', 'rating', 4, 5, 'amenity', 'restaurant')"
    }
  }
}
