{
  "queries": [
    {
      "name": "Exact Match Query",
      "function": "exact_match_query",
      "code_to_execute": "SELECT *, ST_X(geom) as longitude, ST_Y(geom) as latitude FROM '{parquet_file}' WHERE {column_name} = {value} AND ST_Intersects(geom, ST_GeomFromText('{aoi}'));",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to match against",
        "value": "The exact value to search (boolean)",
        "aoi": "Optional WKT geometry string for spatial filtering"
      },
      "output_expected": "A dataset containing all rows where the column exactly matches the provided value and intersects with the AOI if specified.",
      "explanation": "This query filters the dataset by verifying each row's specified column against an exact boolean value and optional spatial intersection.",
      "details": "Use this query when you need to retrieve data based on an exact match with optional spatial filtering.",
      "function_call": "exact_match_query(parquet_file='{parquet_file}', column_name='{column_name}', value='{value}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "LIKE Query",
      "function": "like_query",
      "code_to_execute": "SELECT * FROM '{parquet_file}' WHERE {column_name} LIKE '{pattern}' AND ST_Intersects(geom, ST_GeomFromText('{aoi}'));",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Column name to perform pattern matching",
        "pattern": "The pattern to search for, e.g., 'prefix%'",
        "aoi": "Optional WKT geometry string for spatial filtering"
      },
      "output_expected": "Rows where the column contains values matching the specified pattern and intersects with the AOI if specified.",
      "explanation": "Uses the SQL LIKE operator for pattern matching with optional spatial filtering.",
      "details": "Useful for fuzzy matching with optional spatial filtering.",
      "function_call": "like_query(parquet_file='{parquet_file}', column_name='{column_name}', pattern='{pattern}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "Within Area Query",
      "function": "within_area_query",
      "code_to_execute": "WITH geom_col AS (SELECT {get_geometry_column} as col_name), data AS (SELECT *, ST_Distance(geom, ST_Centroid(ST_GeomFromText('{aoi}'))) as distance_km FROM '{parquet_file}' WHERE {column_name} = {value} AND ST_Intersects(geom, ST_GeomFromText('{aoi}'))) SELECT * FROM data ORDER BY distance_km ASC;",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to filter",
        "value": "Boolean value to match in the column",
        "aoi": "WKT geometry string defining the area of interest"
      },
      "output_expected": "Records that intersect with the given AOI and match the column value, ordered by distance to AOI centroid.",
      "explanation": "This query retrieves data that intersects with the specified area and matches the boolean column value.",
      "details": "Uses ST_Intersects for spatial filtering and calculates distances to AOI centroid for ordering.",
      "function_call": "within_area_query(parquet_file='{parquet_file}', column_name='{column_name}', value='{value}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "Nearest Query",
      "function": "nearest_query",
      "code_to_execute": "WITH geom_col AS (SELECT {get_geometry_column} as col_name), data AS (SELECT *, ST_Distance(geom, ST_Centroid(ST_GeomFromText('{aoi}'))) as distance_km FROM '{parquet_file}' WHERE {column_name} = {value}) SELECT * FROM data ORDER BY distance_km ASC LIMIT {limit};",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to filter",
        "value": "Boolean value to match in the column",
        "aoi": "WKT geometry string for distance calculation",
        "limit": "Number of nearest records to return (default: 5)"
      },
      "output_expected": "The nearest records to the AOI centroid that match the column value.",
      "explanation": "Finds the closest records to the AOI centroid, ordered by distance.",
      "details": "Uses ST_Distance for calculating distances to AOI centroid.",
      "function_call": "nearest_query(parquet_file='{parquet_file}', column_name='{column_name}', value='{value}', aoi='{aoi}', limit={limit})",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "Count Within Area Query",
      "function": "count_within_area_query",
      "code_to_execute": "WITH geom_col AS (SELECT {get_geometry_column} as col_name), distances AS (SELECT *, ST_Distance(geom, ST_Centroid(ST_GeomFromText('{aoi}'))) as distance_km FROM '{parquet_file}' WHERE {column_name} = {value} AND ST_Intersects(geom, ST_GeomFromText('{aoi}'))) SELECT COUNT(*) as count, MIN(distance_km) as min_distance_km, MAX(distance_km) as max_distance_km FROM distances;",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the column to filter",
        "value": "Boolean value to match in the column",
        "aoi": "WKT geometry string defining the area of interest"
      },
      "output_expected": "Count of records within AOI with min and max distances to centroid.",
      "explanation": "Counts records intersecting with AOI and provides distance statistics.",
      "details": "Uses ST_Intersects for spatial filtering and ST_Distance for distance calculations.",
      "function_call": "count_within_area_query(parquet_file='{parquet_file}', column_name='{column_name}', value='{value}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "Combined Filters Query",
      "function": "combined_filters_query",
      "code_to_execute": "SELECT *, ST_Distance(geom, ST_Centroid(ST_GeomFromText('{aoi}'))) as distance_km FROM '{parquet_file}' WHERE {column_name} = {value} AND {pattern_column} LIKE '{pattern}' AND ST_Intersects(geom, ST_GeomFromText('{aoi}')) ORDER BY distance_km ASC;",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "column_name": "Name of the boolean column to filter",
        "value": "Boolean value to match",
        "pattern_column": "Column for pattern matching",
        "pattern": "Pattern to search for",
        "aoi": "WKT geometry string for spatial filtering"
      },
      "output_expected": "Records meeting boolean, pattern, and spatial criteria.",
      "explanation": "Combines boolean filter, LIKE pattern matching, and spatial intersection.",
      "details": "Orders results by distance to AOI centroid.",
      "function_call": "combined_filters_query(parquet_file='{parquet_file}', column_name='{column_name}', value='{value}', pattern_column='{pattern_column}', pattern='{pattern}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    },
    {
      "name": "Range Query",
      "function": "range_query",
      "code_to_execute": "SELECT *, ST_Distance(geom, ST_Centroid(ST_GeomFromText('{aoi}'))) as distance_km FROM (SELECT * FROM '{parquet_file}' WHERE {range_column} BETWEEN {min_value} AND {max_value} AND {filter_column} = {value}) WHERE ST_Intersects(geom, ST_GeomFromText('{aoi}')) ORDER BY distance_km ASC;",
      "inputs_required": {
        "parquet_file": "Path to the Parquet file",
        "range_column": "Column for range filtering",
        "min_value": "Minimum value of the range",
        "max_value": "Maximum value of the range",
        "filter_column": "Boolean column to filter",
        "value": "Boolean value to match",
        "aoi": "Optional WKT geometry string for spatial filtering"
      },
      "output_expected": "Records within value range and spatial constraints.",
      "explanation": "Filters by value range and boolean condition with optional spatial intersection.",
      "details": "Orders results by distance to AOI centroid when AOI is specified.",
      "function_call": "range_query(parquet_file='{parquet_file}', range_column='{range_column}', min_value={min_value}, max_value={max_value}, filter_column='{filter_column}', value='{value}', aoi='{aoi}')",
      "imports_required": ["import duckdb"]
    }
  ]
}
